{"version":3,"sources":["component/util/VerticalAlignComponent.tsx","component/dialog/loading/LoadingContext.tsx","manager/AuthManager.ts","di/modules/AuthModule.ts","manager/storage/CookieStorage.ts","manager/storage/LocalStorage.ts","manager/storage/StorageManager.ts","di/modules/StorageModule.ts","di/ComponentContainer.tsx","component/dialog/alert/AlertDialogComponent.tsx","component/page/login/LoginComponent.tsx","component/dialog/loading/LoadingComponent.tsx","component/util/AuthGuardComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["VerticalAlignComponent","properties","containerInlineStyle","alignItems","verticalAlign","justifyContent","horizontalAlign","className","style","children","defaultProps","LoadingContext","React","createContext","showLoading","isVisible","KEY_TOKEN","AuthManager","storageManager","username","password","a","Error","this","set","remove","get","AuthModule","container","register","authManager","asClass","singleton","CookieStorage","key","value","expiration","setCookie","toUTCString","getCookie","Date","now","document","cookie","cname","cvalue","expires","name","ca","decodeURIComponent","split","i","length","c","charAt","substring","indexOf","LocalStorage","localStorage","setItem","JSON","stringify","targetItem","getItem","console","log","undefined","entry","parse","currentDate","removeItem","error","clear","StorageManager","storages","storage","find","isSupported","StorageModule","PLATFORM_WEB","components","localStorageImpl","LocalStorageImpl","cookieStorageImpl","CookieStorageImpl","randomExaple","asValue","getPlatform","asFunction","ComponentContainer","awilix","injectionMode","CLASSIC","forEach","module","cradle","DependencyInjectionContext","AlertContext","show","model","AlertDialogComponent","props","useState","stack","setStack","topStackItem","alertContextValue","addToStack","Provider","Modal","animation","Header","Title","title","type","getTitle","Body","message","Footer","buttons","map","item","Button","variant","onClick","warn","pop","text","LoginComponent","loggedIn","setLoggedIn","useForm","handleSubmit","loadingContext","useContext","alertContext","onFormSubmitHandler","loginFormData","login","to","Container","fluid","Row","Col","md","span","offset","Card","Form","onSubmit","Group","Label","Control","LoadingComponent","visible","setVisible","loadingContextValue","AuthGuardComponent","state","setState","useEffect","isLoggedIn","authRequired","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4XAQMA,EAA4E,SAACC,GAC/E,IAAIC,EAAuB,CACvBC,WAAYF,EAAWG,cACvBC,eAAgBJ,EAAWK,iBAE/B,OACI,qBAAKC,UAAU,kBAAkBC,MAAON,EAAxC,SACKD,EAAWQ,YAIxBT,EAAuBU,aAAe,CAClCN,cAAe,SACfE,gBAAiB,UAGNN,QCtBFW,EAAiBC,IAAMC,cAAc,CAC9CC,YAAa,SAACC,O,uCCDZC,EAAY,QAELC,EAAb,WACI,WACYC,GACT,yBADSA,iBAFhB,gFAKI,WAAYC,EAAkBC,GAA9B,SAAAC,EAAA,yDACoB,SAAZF,GAAmC,SAAZC,EAD/B,sBAEc,IAAIE,MAAM,iCAFxB,uBAIUC,KAAKL,eAAeM,IAAIR,EAAW,eAJ7C,gDALJ,sHAYI,WAAeG,EAAkBC,GAAjC,SAAAC,EAAA,0FAZJ,oHAgBI,sBAAAA,EAAA,sEACUE,KAAKL,eAAeO,OAAOT,GADrC,gDAhBJ,qHAoBI,sBAAAK,EAAA,sEACmBE,KAAKL,eAAeQ,IAAIV,GAD3C,0FApBJ,6DCIaW,EAAb,wFACI,SAASC,GACLA,EAAUC,SAAS,CACfC,YAAaC,YAAQd,GAAae,kBAH9C,KCNaC,EAAb,0HAEI,WAAUC,EAAaC,EAAeC,GAAtC,SAAAf,EAAA,sDACIE,KAAKc,UAAUH,EAAKC,EAAOC,EAAWE,eAD1C,gDAFJ,mHAMI,WAAUJ,GAAV,SAAAb,EAAA,+EACWE,KAAKgB,UAAUL,IAD1B,gDANJ,kHAUI,WAAaA,GAAb,SAAAb,EAAA,sDACIE,KAAKc,UAAUH,EAAK,GAAK,IAAIM,KAAKA,KAAKC,MAAQ,KAAOH,eAD1D,gDAVJ,iHAcI,sBAAAjB,EAAA,sDACIqB,SAASC,OAAS,GADtB,2CAdJ,6EAkBI,SAAkBC,EAAOC,EAAQT,GAC7B,IAAIU,EAAU,WAAaV,EAC3BM,SAASC,OAASC,EAAQ,IAAMC,EAAS,IAAMC,EAAU,YApBjE,uBAwBI,SAAkBF,GAId,IAHA,IAAIG,EAAOH,EAAQ,IAEfI,EADgBC,mBAAmBP,SAASC,QACzBO,MAAM,KACpBC,EAAI,EAAGA,EAAIH,EAAGI,OAAQD,IAAK,CAEhC,IADA,IAAIE,EAAIL,EAAGG,GACW,KAAfE,EAAEC,OAAO,IACZD,EAAIA,EAAEE,UAAU,GAEpB,GAAuB,GAAnBF,EAAEG,QAAQT,GACV,OAAOM,EAAEE,UAAUR,EAAKK,OAAQC,EAAED,QAG1C,MAAO,KArCf,yBAwCI,WACI,OAAO,MAzCf,KCAaK,EAAb,0HACI,WAAUvB,EAAaC,EAAeC,GAAtC,SAAAf,EAAA,sDACIqC,aAAaC,QAAQzB,EAAK0B,KAAKC,UAAU,CACrC1B,QACAC,WAAYA,EAAWE,iBAH/B,2CADJ,mHAQI,WAAUJ,GAAV,qBAAAb,EAAA,kEAEYyC,EAAaJ,aAAaK,QAAQ7B,GAF9C,uBAIY8B,QAAQC,IAAR,uDAA4D/B,IAJxE,uBAKmBgC,GALnB,UAQYC,EAAQP,KAAKQ,MAAMN,GACnB1B,EAAa,IAAII,KAAK2B,EAAM/B,YAC5BiC,EAAc,IAAI7B,OAClBJ,GAAciC,GAX1B,wBAYYL,QAAQC,IAAR,yCAA8C7B,EAA9C,kBAAkEF,IAZ9E,uBAamBgC,GAbnB,iCAeeC,EAAMhC,OAfrB,yCAiBQuB,aAAaY,WAAWpC,GACxB8B,QAAQO,MAAR,MAlBR,uBAmBeL,GAnBf,0DARJ,kHA+BI,WAAahC,GAAb,SAAAb,EAAA,sDACIqC,aAAaY,WAAWpC,GAD5B,2CA/BJ,iHAmCI,sBAAAb,EAAA,sDACIqC,aAAac,QADjB,2CAnCJ,+EAuCI,WACI,QAASd,iBAxCjB,KCCae,EAAb,WAEI,WACIC,GAIA,GAHD,yBAHKC,aAGN,EACEX,QAAQC,IAAI,8BACZ1C,KAAKoD,QAAUD,EAASE,MAAK,SAAAD,GAAO,OAAIA,EAAQE,kBAC3CtD,KAAKoD,QACN,MAAM,IAAIrD,MAAJ,gDARlB,8EAYI,WAAUY,EAAaC,EAAeC,GAAtC,SAAAf,EAAA,6DACSe,IACDA,EAAa,IAAII,KAAKA,KAAKC,MAAQ,QAF3C,SAIUlB,KAAKoD,QAAQnD,IAAIU,EAAKC,EAAOC,GAJvC,gDAZJ,mHAmBI,WAAUF,GAAV,SAAAb,EAAA,sEACiBE,KAAKoD,QAAQjD,IAAIQ,GADlC,wFAnBJ,kHAuBI,WAAaA,GAAb,SAAAb,EAAA,sEACUE,KAAKoD,QAAQlD,OAAOS,GAD9B,gDAvBJ,iHA2BI,sBAAAb,EAAA,sEACUE,KAAKoD,QAAQH,QADvB,gDA3BJ,6DCUaM,EAAb,iDAuBYC,aAAe,MAvB3B,4CACI,SAASnD,GACL,IAAIoD,EAAa,CACbC,iBAAkBlD,YAAQmD,GAAkBlD,YAC5CmD,kBAAmBpD,YAAQqD,GAAmBpD,YAC9Cd,eAAgBa,YAAQ0C,GAAgBzC,YACxCqD,aAAcC,YAAQ,aAE1B,GAAI/D,KAAKgE,eAAiBhE,KAAKwD,aAK3B,MAAM,IAAIzD,MAAJ,4BAJN0D,EAAU,SAAeQ,aAAW,SAAUP,EAAkBE,GAC5D,MAAO,CAACF,EAAkBE,MAC3BnD,YAIPgC,QAAQC,IAAI,2BAA4Be,GACxCpD,EAAUC,SAASmD,KAhB3B,yBAmBI,WACI,OAAOzD,KAAKwD,iBApBpB,KCcaU,EAAqB,IAnBlC,WAEI,aAAe,IAAD,gCADN7D,eACM,EACVL,KAAKK,UAAY8D,IAAuB,CACpCC,cAAeD,IAAqBE,UAE1B,CAEV,IAAId,EACJ,IAAInD,GAEAkE,SAAQ,SAAAC,GAAM,OAAIA,EAAOjE,SAAS,EAAKD,cAXvD,uCAcI,WACI,OAAOL,KAAKK,UAAUmE,WAf9B,MAqBaC,EAA6BpF,IAAMC,cAAc4E,G,gBCXjDQ,EAAerF,IAAMC,cAAc,CAC5CqF,KAD4C,SACvCC,OA6EMC,EAxEuC,SAACC,GAAwC,IAAD,QAClEC,mBAA6B,IADqC,mBACrFC,EADqF,KAC9EC,EAD8E,KActFC,EAAe,KACfF,EAAMnD,OAAS,IACfqD,EAAeF,EAAMA,EAAMnD,OAAS,IAGxC,IAoBIsD,EAAoB,CACpBR,KADoB,SACfC,IAtCQ,SAACA,GACdK,EAAS,GAAD,mBAAKD,GAAL,CAAYJ,KAsChBQ,CAAWR,KAInB,OACI,cAACF,EAAaW,SAAd,CAAuBzE,MAAOuE,EAA9B,SACI,sBAAKnG,UAAU,yBAAf,UACI,eAACsG,EAAA,EAAD,CAAOX,KAAsB,GAAhBK,EAAMnD,OAAa0D,WAAW,EAA3C,UACI,cAACD,EAAA,EAAME,OAAP,UACI,cAACF,EAAA,EAAMG,MAAP,UA/BS,WACzB,GAAoB,GAAhBT,EAAMnD,OACN,OAAO,KAEX,IAAIqD,EAAeF,EAAMA,EAAMnD,OAAS,GACxC,GAAMqD,EAAaQ,MACf,OAAOR,EAAaQ,MAExB,OAAQR,EAAaS,MACjB,IAAK,QACD,MAAO,QACX,IAAK,UACD,MAAO,UACX,IAAK,OACD,MAAO,OACX,QACI,MAAO,WAeeC,OAElB,cAACN,EAAA,EAAMO,KAAP,oBACKX,SADL,aACK,EAAcY,UAEnB,cAACR,EAAA,EAAMS,OAAP,oBACKb,SADL,iBACK,EAAcc,eADnB,aACK,EAAuBC,KAAI,SAAAC,GAAI,OAC5B,cAACC,EAAA,EAAD,CAAQC,QAASF,EAAKP,KAAMU,QAAU,WAC/BH,EAAKG,SACJH,EAAKG,UApDb,GAAhBrB,EAAMnD,QACNY,QAAQ6D,KAAK,uCAEjBtB,EAAMuB,MACNtB,EAAS,YAAID,KA8CO,SAKKkB,EAAKM,eAIrB1B,EAAM5F,eC/Ef6F,EAAa1F,IAAb0F,SAkEO0B,EA9DyD,SAAC/H,GAAwC,IAAD,EAC9EqG,GAAS,GADqE,mBACvG2B,EADuG,KAC7FC,EAD6F,OAE7EC,cAA1BtG,EAFuG,EAEvGA,SAAUuG,EAF6F,EAE7FA,aACXC,EAAiBC,qBAAW3H,GAC5B4H,EAAeD,qBAAWrC,GACxBnE,EAAgBwG,qBAAWtC,GAA4BtE,MAAvDI,YACA0G,EAAmB,uCAAG,WAAOC,GAAP,SAAApH,EAAA,6DACxBgH,EAAevH,aAAY,GADH,kBAGdgB,EAAY4G,MAAMD,EAActH,SAAUsH,EAAcrH,UAH1C,OAIpB8G,GAAY,GAJQ,gDAMpBK,EAAarC,KAAK,CACdgB,KAAM,QACNG,QAAS,KAAGA,QACZE,QAAS,CACL,CACIL,KAAM,SACNa,KAAM,SAZE,QAiBxBM,EAAevH,aAAY,GAjBH,yDAAH,sDAmBzB,OAAGmH,EACS,cAAC,IAAD,CAAUU,GAAG,MAGrB,qBAAKpI,UAAU,uBAAf,SACI,cAAC,EAAD,CAAwBD,gBAAgB,SAASF,cAAc,SAA/D,SACI,cAACwI,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAA5B,SACI,cAACC,EAAA,EAAD,UACI,cAACA,EAAA,EAAK/B,KAAN,UACI,cAACgC,EAAA,EAAD,CAAMC,SAAUjB,EAAaI,GAA7B,SACI,sBAAKjI,UAAU,eAAf,UACI,eAAC6I,EAAA,EAAKE,MAAN,WACI,cAACF,EAAA,EAAKG,MAAN,uBACA,cAACH,EAAA,EAAKI,QAAN,eAAkB3H,EAAS,iBAE/B,eAACuH,EAAA,EAAKE,MAAN,WACI,cAACF,EAAA,EAAKG,MAAN,uBACA,cAACH,EAAA,EAAKI,QAAN,aAActC,KAAK,YAAerF,EAAS,iBAE/C,cAAC6F,EAAA,EAAD,CAAQR,KAAK,SAASS,QAAQ,UAA9B,mBACA,cAACD,EAAA,EAAD,CAAQR,KAAK,SAASS,QAAQ,YAA9B,wBACA,cAACD,EAAA,EAAD,CAAQR,KAAK,SAASS,QAAQ,OAA9B,8CCzDpCrB,G,MAAa1F,IAAb0F,UAwBOmD,EApB+D,SAACpD,GAAuC,IAAD,EACrFC,GAAS,GAD4E,mBAC5GoD,EAD4G,KACnGC,EADmG,KAE7GC,EAAsB,CACtB9I,YAAa,SAACC,GAAD,OAAwB4I,EAAW5I,KAEpD,OACI,eAACJ,EAAeiG,SAAhB,CAAyBzE,MAAOyH,EAAhC,UAEQF,GAEI,qBAAKnJ,UAAU,oBAAf,SACI,sBAAKA,UAAU,aAAf,UAA4B,wBAAW,6BAIlD8F,EAAM5F,aCmBJoJ,G,MAhCiE,SAACxD,GAAsC,IAE7GvE,EAAgBwG,qBAAWtC,GAA4BtE,MAAvDI,YAF6G,EAK3FwE,mBATN,GAIiG,mBAK9GwD,EAL8G,KAKvGC,EALuG,KAqBnH,GAfAC,qBAAU,WACNhG,QAAQC,IAAI,4CACZ,sBAAC,4BAAA5C,EAAA,6DACG2C,QAAQC,IAAI,wCADf,SAE0BnC,EAAYmI,aAFtC,OAEOA,EAFP,OAGGjG,QAAQC,IAAR,iCAAsCgG,EAAtC,2BAAmE5D,EAAM6D,eACrED,IAAe5D,EAAM6D,aACrBH,EAhBO,GAkBPA,EAjBK,GAUZ,0CAAD,KAUD,IAEH/F,QAAQC,IAAI,UAAW6F,GAxBL,GAyBdA,EACA,OAAQ,+DACL,GA1BY,GA0BRA,EACP,OAAQ,cAAC,IAAD,CAAUnB,GAAG,WAClB,GA3BU,GA2BNmB,EACP,OAAQ,mCAAGzD,EAAM5F,WAEjB,MAAM,IAAIa,MAAJ,yCC5BOV,IAAb0F,SA8BO6D,MA5Bf,WACE,OACE,qBAAK5J,UAAU,MAAf,SACE,cAACyF,EAA2BY,SAA5B,CAAqCzE,MAAOsD,EAA5C,SACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO2E,KAAK,SAASC,UAAWrC,EAAhC,SACE,cAAC,EAAD,CAAoBkC,cAAc,EAAlC,SACE,cAAC,EAAD,QAGJ,cAAC,IAAD,CAAOE,KAAK,IAAZ,SACE,eAAC,EAAD,CAAoBF,cAAc,EAAlC,oFACyE,cAAC,IAAD,CAAMvB,GAAG,SAAT,sCCf5E2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvI,SAASwI,eAAe,SAM1BZ,M","file":"static/js/main.564b606a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./VerticalAlignComponent.css\"\n\nexport type VerticalAlignProperties = React.PropsWithChildren<{\n    verticalAlign: \"top\"|\"center\"|\"bottom\",\n    horizontalAlign: \"left\"|\"center\"|\"right\"\n}>\n\nconst VerticalAlignComponent : React.FunctionComponent<VerticalAlignProperties> = (properties: VerticalAlignProperties) => {\n    let containerInlineStyle = {\n        alignItems: properties.verticalAlign,\n        justifyContent: properties.horizontalAlign\n    };\n    return (\n        <div className=\"table-container\" style={containerInlineStyle}>\n            {properties.children}\n        </div>\n    );\n};\nVerticalAlignComponent.defaultProps = {\n    verticalAlign: \"center\",\n    horizontalAlign: \"center\"\n};\n\nexport default VerticalAlignComponent;","import React from \"react\";\n\nexport const LoadingContext = React.createContext({\n    showLoading: (isVisible: boolean) => {}\n});","import { StorageManager } from \"./storage/StorageManager\";\n\nconst KEY_TOKEN = \"token\"\n\nexport class AuthManager {\n    public constructor(\n        private storageManager: StorageManager\n    ) {\n    }\n    async login(username: string, password: string): Promise<void> {\n        if (username != \"admin\" || password != \"admin\") {\n            throw new Error(\"Invalid credentials provided.\");\n        }\n        await this.storageManager.set(KEY_TOKEN, \"debug-token\");\n    }\n\n    async register(username: string, password: string): Promise<void> {\n\n    }\n\n    async logout() {\n        await this.storageManager.remove(KEY_TOKEN);\n    }\n\n    async isLoggedIn() : Promise<boolean>{\n        return !!await this.storageManager.get(KEY_TOKEN);\n    }\n\n}","import { asClass, asValue, AwilixContainer } from \"awilix\";\nimport { AuthManager } from \"../../manager/AuthManager\"\nimport { IModule } from \"./base/IModule\"\n\nexport type AuthModuleType = {\n    authManager: AuthManager\n};\n\nexport class AuthModule implements IModule{\n    register(container: AwilixContainer<any>) {\n        container.register({\n            authManager: asClass(AuthManager).singleton()\n        });\n    }\n}","import { IStorage } from \"./IStorage\";\n\nexport class CookieStorage implements IStorage {\n\n    async set(key: string, value: string, expiration: Date): Promise<void> {\n        this.setCookie(key, value, expiration.toUTCString());\n    }\n\n    async get(key: string): Promise<string> {\n        return this.getCookie(key);\n    }\n\n    async remove(key: string): Promise<void> {\n        this.setCookie(key, \"\", (new Date(Date.now() - 1000)).toUTCString());\n    }\n\n    async clear(): Promise<void> {\n        document.cookie = \"\";\n    }\n\n    private setCookie(cname, cvalue, expiration: string) {\n        let expires = \"expires=\" + expiration;\n        document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n    }\n\n\n    private getCookie(cname): string {\n        let name = cname + \"=\";\n        let decodedCookie = decodeURIComponent(document.cookie);\n        let ca = decodedCookie.split(';');\n        for (let i = 0; i < ca.length; i++) {\n            let c = ca[i];\n            while (c.charAt(0) == ' ') {\n                c = c.substring(1);\n            }\n            if (c.indexOf(name) == 0) {\n                return c.substring(name.length, c.length);\n            }\n        }\n        return \"\";\n    }\n\n    isSupported(): boolean {\n        return true;\n    }\n}","import { IStorage } from \"./IStorage\";\n\nexport class LocalStorage implements IStorage {\n    async set(key: string, value: string, expiration: Date): Promise<void> {\n        localStorage.setItem(key, JSON.stringify({\n            value,\n            expiration: expiration.toUTCString()\n        }));\n    }\n\n    async get(key: string): Promise<string | undefined> {\n        try {\n            let targetItem = localStorage.getItem(key);\n            if (!targetItem) {\n                console.log(`Target item not found in local storage, key: ${key}`); \n                return undefined;\n                \n            }\n            let entry = JSON.parse(targetItem);\n            let expiration = new Date(entry.expiration);\n            let currentDate = new Date();\n            if (expiration >= currentDate) {\n                console.log(`This entry is already expired: ${expiration}, key: ${key}`);\n                return undefined;\n            }\n            return entry.value;\n        } catch (error) {\n            localStorage.removeItem(key);\n            console.error(error);\n            return undefined;\n        }\n    }\n\n    async remove(key: string): Promise<void> {\n        localStorage.removeItem(key);\n    }\n\n    async clear(): Promise<void> {\n        localStorage.clear();\n    }\n\n    isSupported(): boolean {\n        return !!localStorage;\n    }\n}","import { CookieStorage } from \"./CookieStorage\";\nimport { IStorage } from \"./IStorage\";\nimport { LocalStorage } from \"./LocalStorage\";\nexport class StorageManager {\n    private storage: IStorage\n    constructor(\n        storages: Array<IStorage>\n    ) {\n        console.log(\"StorageManager constructor\");\n        this.storage = storages.find(storage => storage.isSupported());\n        if (!this.storage) {\n            throw new Error(`No supported storage implementation is found`);\n        }\n    }\n\n    async set(key: string, value: string, expiration?: Date): Promise<void> {\n        if (!expiration) {\n            expiration = new Date(Date.now() + 1000 * 60 * 60 * 24);\n        }\n        await this.storage.set(key, value, expiration);\n    }\n    \n    async get(key: string): Promise<string | undefined> {\n        return await this.storage.get(key);\n    }\n    \n    async remove(key: string) : Promise<void>{\n        await this.storage.remove(key);\n    }\n\n    async clear() : Promise<void>{\n        await this.storage.clear();\n    }\n}","import { asClass, asFunction, asValue, AwilixContainer } from \"awilix\";\nimport { CookieStorage as CookieStorageImpl } from \"../../manager/storage/CookieStorage\";\nimport { IStorage } from \"../../manager/storage/IStorage\";\nimport { LocalStorage as LocalStorageImpl } from \"../../manager/storage/LocalStorage\";\nimport { IModule } from \"./base/IModule\";\nimport { StorageManager } from \"../../manager/storage/StorageManager\";\n\nexport type StorageModuleType = {\n    localStorageImpl: IStorage,\n    cookieStorageImpl: IStorage,\n    storages: Array<IStorage>\n}\n\nexport class StorageModule implements IModule {\n    register(container: AwilixContainer<any>) {\n        let components = {\n            localStorageImpl: asClass(LocalStorageImpl).singleton(),\n            cookieStorageImpl: asClass(CookieStorageImpl).singleton(),\n            storageManager: asClass(StorageManager).singleton(),\n            randomExaple: asValue(\"example2\")\n        }\n        if (this.getPlatform() == this.PLATFORM_WEB) {\n            components[\"storages\"] = asFunction(function (localStorageImpl, cookieStorageImpl) {\n                return [localStorageImpl, cookieStorageImpl];\n            }).singleton();\n        } else {\n            throw new Error(`Not supported platform: `);\n        }\n        console.log(\"StorageModule components\", components);\n        container.register(components);\n    }\n\n    private getPlatform(): string {\n        return this.PLATFORM_WEB;\n    }\n\n    private PLATFORM_WEB = \"WEB\"\n}","import React from \"react\";\nimport * as awilix from \"awilix\";\nimport { AuthModule, AuthModuleType } from \"./modules/AuthModule\";\nimport { AppModule, AppModuleType } from \"./modules/AppModule\";\nimport { StorageModule, StorageModuleType } from \"./modules/StorageModule\";\n\nexport type AppComponent = AuthModuleType & AppModuleType & StorageModuleType;\n\nexport class ComponentContainerImpl {\n    private container: awilix.AwilixContainer<AppComponent>\n    constructor() {\n        this.container = awilix.createContainer({\n            injectionMode: awilix.InjectionMode.CLASSIC\n        });\n        let modules = [\n            //new AppModule(),\n            new StorageModule(),\n            new AuthModule(),\n        ];\n        modules.forEach(module => module.register(this.container));\n    }\n    \n    get(): AppComponent {\n        return this.container.cradle;\n    }\n}\n\nexport const ComponentContainer = new ComponentContainerImpl();\n\nexport const DependencyInjectionContext = React.createContext(ComponentContainer);","import Module from \"module\";\nimport React, { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { setConstantValue } from \"typescript\";\n\n\nexport interface ButtonModel {\n    type: \"danger\" | \"warning\" | \"primary\" | \"secondary\" | \"dark\" | \"light\" | \"success\"\n    text: string;\n    onClick?: () => void;\n}\nexport interface DialogModel {\n    type: \"error\" | \"warning\" | \"info\",\n    title?: string,\n    message: string,\n    buttons: Array<ButtonModel>\n}\n\nexport const AlertContext = React.createContext({\n    show(model: DialogModel): void {\n        //Empty implementation\n     }\n});\n\nconst AlertDialogComponent: React.FunctionComponent = (props: React.PropsWithChildren<{}>) => {\n    let [stack, setStack] = useState<Array<DialogModel>>([]);\n    let addToStack = (model: DialogModel) => {\n        setStack([...stack, model]);\n    };\n\n    let popStack = () => {\n        if (stack.length == 0) {\n            console.warn(\"The dialog stack was already empty!\");\n        }\n        stack.pop();\n        setStack([...stack]);\n    };\n\n    let topStackItem = null;\n    if (stack.length > 0) {\n        topStackItem = stack[stack.length - 1];\n    }\n\n    let getTitle: () => string = () => {\n        if (stack.length == 0) {\n            return null;\n        }\n        let topStackItem = stack[stack.length - 1];\n        if (!!topStackItem.title) {\n            return topStackItem.title;\n        }\n        switch (topStackItem.type) {\n            case \"error\":\n                return \"Error\";\n            case \"warning\":\n                return \"Warning\";\n            case \"info\":\n                return \"Info\";\n            default:\n                return \"Unknown\";\n        }\n    }\n\n    let alertContextValue = {\n        show(model: DialogModel) {\n            addToStack(model);\n        }\n    };\n\n    return (\n        <AlertContext.Provider value={alertContextValue}>\n            <div className=\"alert-dialog-component\">\n                <Modal show={stack.length != 0} animation={false}>\n                    <Modal.Header>\n                        <Modal.Title>{getTitle()}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {topStackItem?.message}\n                    </Modal.Body>\n                    <Modal.Footer>\n                        {topStackItem?.buttons?.map(item => (\n                            <Button variant={item.type} onClick={(() => {\n                                if(item.onClick){\n                                    item.onClick();\n                                }\n                                popStack();\n                            })}>{item.text}</Button>\n                        ))}\n                    </Modal.Footer>\n                </Modal>\n                {props.children}\n            </div></AlertContext.Provider >\n    );\n};\n\n\nexport default AlertDialogComponent;","import React, { useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Container, Row, Col, InputGroup, FormLabel, FormControl, Card, FormGroup, Button, Form, Modal} from \"react-bootstrap\";\nimport VerticalAlignComponent from \"../../util/VerticalAlignComponent\";\nimport { LoadingContext } from \"../../dialog/loading/LoadingContext\";\nimport { useForm } from \"react-hook-form\";\nimport \"./LoginComponent.scss\";\nimport { DependencyInjectionContext } from \"../../../di/ComponentContainer\";\nimport { setConstantValue } from \"typescript\";\nimport { AlertContext } from \"../../dialog/alert/AlertDialogComponent\";\n\nconst { useState } = React;\n\ninterface LoginComponentProperty { }\n\nconst LoginComponent: React.FunctionComponent<LoginComponentProperty> = (properties: LoginComponentProperty) => {\n    let [loggedIn, setLoggedIn] = useState(false);\n    let {register, handleSubmit} = useForm();\n    let loadingContext = useContext(LoadingContext);\n    let alertContext = useContext(AlertContext);\n    let { authManager } = useContext(DependencyInjectionContext).get()\n    const onFormSubmitHandler = async (loginFormData) => {\n        loadingContext.showLoading(true);\n        try{\n            await authManager.login(loginFormData.username, loginFormData.password);\n            setLoggedIn(true);\n        }catch(ex){\n            alertContext.show({\n                type: \"error\",\n                message: ex.message,\n                buttons: [\n                    {\n                        type: \"danger\",\n                        text: \"OK\"\n                    }\n                ]\n            });\n        }\n        loadingContext.showLoading(false);\n    };\n    if(loggedIn){\n        return (<Redirect to=\"/\"/>);\n    }\n    return (\n        <div className=\"page component-login\">\n            <VerticalAlignComponent horizontalAlign=\"center\" verticalAlign=\"center\">\n                <Container fluid>\n                    <Row>\n                        <Col md={{ span: 4, offset: 4 }}>\n                            <Card>\n                                <Card.Body>\n                                    <Form onSubmit={handleSubmit(onFormSubmitHandler)}>\n                                        <div className=\"d-grid gap-2\">\n                                            <Form.Group>\n                                                <Form.Label>Username</Form.Label>\n                                                <Form.Control {...register(\"username\")}></Form.Control>\n                                            </Form.Group>\n                                            <Form.Group>\n                                                <Form.Label>Password</Form.Label>\n                                                <Form.Control type=\"password\" {...register(\"password\")}></Form.Control>\n                                            </Form.Group>\n                                            <Button type=\"submit\" variant=\"primary\">Login</Button>\n                                            <Button type=\"button\" variant=\"secondary\">Skip login</Button>\n                                            <Button type=\"button\" variant=\"link\">Registration</Button>\n                                        </div>\n                                    </Form>\n\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </VerticalAlignComponent>\n        </div>\n    );\n};\n\nexport default LoginComponent;","import React from \"react\";\n\nimport { LoadingContext } from \"./LoadingContext\";\n\nimport \"./LoadingComponent.scss\"\n\nconst { useState } = React;\n\nexport type LoadingComponentProperties = React.PropsWithChildren<{}>;\n\nconst LoadingComponent: React.FunctionComponent<LoadingComponentProperties> = (props: LoadingComponentProperties) => {\n    let [visible, setVisible] = useState(false);\n    let loadingContextValue = {\n        showLoading: (isVisible: boolean) => setVisible(isVisible)\n    };\n    return (\n        <LoadingContext.Provider value={loadingContextValue}>\n            {\n                visible &&\n                (\n                    <div className=\"loading-component\">\n                        <div className=\"lds-ripple\"><div></div><div></div></div>\n                    </div>\n                )\n            }\n            {props.children}\n        </LoadingContext.Provider>\n    );\n};\n\nexport default LoadingComponent;","import React, { useContext, useEffect, useState } from \"react\";\nimport { DependencyInjectionContext } from \"../../di/ComponentContainer\";\nimport { Redirect } from \"react-router-dom\";\n\ntype AuthRequiredComponentProps = React.PropsWithChildren<{\n    authRequired: boolean\n}>;\n\nconst STATE_LOADING = 0;\nconst STATE_REDIRECT = 1;\nconst STATE_RENDER = 2;\n\nconst AuthGuardComponent: React.FunctionComponent<AuthRequiredComponentProps> = (props: AuthRequiredComponentProps) => {\n    //AuthManager\n    let { authManager } = useContext(DependencyInjectionContext).get();\n\n    //States\n    let [state, setState] = useState(STATE_LOADING);\n    useEffect(() => {\n        console.log(\"AuthGuard component useEffect is running\");\n        (async () => {\n            console.log(\"AuthGuard inner component is running\");\n            let isLoggedIn = await authManager.isLoggedIn();\n            console.log(`AuthGuard, isLoggedIn: ${isLoggedIn}, authRequired: ${props.authRequired}`);\n            if (isLoggedIn !== props.authRequired) {\n                setState(STATE_REDIRECT);\n            } else {\n                setState(STATE_RENDER)\n            }\n        })();\n    }, []);\n\n    console.log(\"State: \", state);\n    if (state == STATE_LOADING) {\n        return (<>AuthGuard is running...</>);\n    } else if (state == STATE_REDIRECT) {\n        return (<Redirect to=\"/login\" />);\n    } else if (state == STATE_RENDER) {\n        return (<>{props.children}</>);\n    } else {\n        throw new Error(`Invalid state AuthRequiredComponent`);\n    }\n};\n\nexport default AuthGuardComponent;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Switch, Route, BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { Container, Row, Col } from 'react-bootstrap';\nimport LoginComponent from './component/page/login/LoginComponent';\nimport LoadingComponent from \"./component/dialog/loading/LoadingComponent\";\nimport AlertDialogComponent from \"./component/dialog/alert/AlertDialogComponent\";\nimport { DependencyInjectionContext, ComponentContainer } from \"./di/ComponentContainer\";\n\nimport './App.css';\nimport AuthGuardComponent from './component/util/AuthGuardComponent';\n\nconst { useState } = React;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DependencyInjectionContext.Provider value={ComponentContainer}>\n        <LoadingComponent>\n          <AlertDialogComponent>\n            <Router>\n              <Switch>\n                <Route path=\"/login\" component={LoginComponent}>\n                  <AuthGuardComponent authRequired={false}>\n                    <LoginComponent />\n                  </AuthGuardComponent>\n                </Route>\n                <Route path=\"/\">\n                  <AuthGuardComponent authRequired={true}>\n                    This is the main page, you can navigate with these link to login page: <Link to=\"/login\">Login</Link>\n                  </AuthGuardComponent>\n                </Route>\n              </Switch>\n            </Router>\n          </AlertDialogComponent>\n        </LoadingComponent>\n      </DependencyInjectionContext.Provider>\n    </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}